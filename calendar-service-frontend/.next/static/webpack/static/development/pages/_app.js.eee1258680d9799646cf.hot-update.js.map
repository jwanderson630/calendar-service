{"version":3,"file":"static/webpack/static/development/pages/_app.js.eee1258680d9799646cf.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import App, { Container } from \"next/app\";\nimport Page from \"../components/Page\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport withData from \"../lib/withData\";\nimport gql from \"graphql-tag\";\n\nconst CURRENT_USER_QUERY = gql`\n  query CURRENT_USER_QUERY {\n    loggedInUser {\n      id\n    }\n  }\n`;\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n    // This exposes the query to the user\n    pageProps.query = ctx.query;\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, apollo, pageProps } = this.props;\n    const UserContext = React.createContext({ userId: \"\" });\n    return (\n      <Container>\n        <ApolloProvider client={apollo}>\n          <Query query={CURRENT_USER_QUERY}>\n            {({ data, loading }) => {\n              if (loading) return <div>Loading...</div>;\n              return (\n                <Page>\n                  <Component {...pageProps} />\n                </Page>\n              );\n            }}\n          </Query>\n        </ApolloProvider>\n      </Container>\n    );\n  }\n}\n\nexport default withData(MyApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;;;;;;;;;;;;AA7BA;AACA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AATA;AACA;AAgCA;;;;A","sourceRoot":""}